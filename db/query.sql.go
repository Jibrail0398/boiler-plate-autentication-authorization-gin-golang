// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const getUsers = `-- name: GetUsers :many
SELECT id, name, email, password, created FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUsers = `-- name: InsertUsers :exec
INSERT INTO users(name,email,password) VALUES($1,$2,$3)
`

type InsertUsersParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) InsertUsers(ctx context.Context, arg InsertUsersParams) error {
	_, err := q.db.ExecContext(ctx, insertUsers, arg.Name, arg.Email, arg.Password)
	return err
}
